"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FasterBollingerBands = exports.BollingerBands = void 0;
const __1 = require("..");
const SMA_1 = require("../SMA/SMA");
const error_1 = require("../error");
const util_1 = require("../util");
class BollingerBands {
    constructor(interval, deviationMultiplier = 2) {
        this.interval = interval;
        this.deviationMultiplier = deviationMultiplier;
        this.prices = [];
    }
    get isStable() {
        return this.result !== undefined;
    }
    update(price) {
        this.prices.push(new __1.Big(price));
        if (this.prices.length > this.interval) {
            this.prices.shift();
            const middle = SMA_1.SMA.getResultFromBatch(this.prices);
            const standardDeviation = (0, util_1.getStandardDeviation)(this.prices, middle);
            return (this.result = {
                lower: middle.sub(standardDeviation.times(this.deviationMultiplier)),
                middle,
                upper: middle.add(standardDeviation.times(this.deviationMultiplier)),
            });
        }
    }
    getResult() {
        if (this.result === undefined) {
            throw new error_1.NotEnoughDataError();
        }
        return this.result;
    }
}
exports.BollingerBands = BollingerBands;
class FasterBollingerBands {
    constructor(interval, deviationMultiplier = 2) {
        this.interval = interval;
        this.deviationMultiplier = deviationMultiplier;
        this.prices = [];
    }
    update(price) {
        this.prices.push(price);
        if (this.prices.length > this.interval) {
            this.prices.shift();
            const middle = (0, util_1.getFasterAverage)(this.prices);
            const standardDeviation = (0, util_1.getFasterStandardDeviation)(this.prices, middle);
            return (this.result = {
                lower: middle - standardDeviation * this.deviationMultiplier,
                middle,
                upper: middle + standardDeviation * this.deviationMultiplier,
            });
        }
    }
    getResult() {
        if (this.result === undefined) {
            throw new error_1.NotEnoughDataError();
        }
        return this.result;
    }
    get isStable() {
        return this.result !== undefined;
    }
}
exports.FasterBollingerBands = FasterBollingerBands;
//# sourceMappingURL=BollingerBands.js.map