"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FasterEMA = exports.EMA = void 0;
const __1 = require("..");
const MovingAverage_1 = require("../MA/MovingAverage");
const error_1 = require("../error");
class EMA extends MovingAverage_1.MovingAverage {
    constructor(interval) {
        super(interval);
        this.interval = interval;
        this.pricesCounter = 0;
        this.weightFactor = 2 / (this.interval + 1);
    }
    update(_price) {
        this.pricesCounter++;
        const price = new __1.Big(_price);
        if (this.result === undefined) {
            this.result = price;
        }
        return this.setResult(price.times(this.weightFactor).add(this.result.times(1 - this.weightFactor)));
    }
    getResult() {
        if (this.pricesCounter < this.interval) {
            throw new error_1.NotEnoughDataError();
        }
        return this.result;
    }
    get isStable() {
        try {
            this.getResult();
            return true;
        }
        catch (_a) {
            return false;
        }
    }
}
exports.EMA = EMA;
class FasterEMA extends MovingAverage_1.FasterMovingAverage {
    constructor(interval) {
        super(interval);
        this.interval = interval;
        this.pricesCounter = 0;
        this.weightFactor = 2 / (this.interval + 1);
    }
    update(price) {
        this.pricesCounter++;
        if (this.result === undefined) {
            this.result = price;
        }
        return this.setResult(price * this.weightFactor + this.result * (1 - this.weightFactor));
    }
    getResult() {
        if (this.pricesCounter < this.interval) {
            throw new error_1.NotEnoughDataError();
        }
        return this.result;
    }
    get isStable() {
        try {
            this.getResult();
            return true;
        }
        catch (_a) {
            return false;
        }
    }
}
exports.FasterEMA = FasterEMA;
//# sourceMappingURL=EMA.js.map