"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FasterCCI = exports.CCI = void 0;
const Indicator_1 = require("../Indicator");
const __1 = require("..");
const SMA_1 = require("../SMA/SMA");
const MAD_1 = require("../MAD/MAD");
class CCI extends Indicator_1.BigIndicatorSeries {
    constructor(interval) {
        super();
        this.interval = interval;
        this.prices = [];
        this.typicalPrices = [];
        this.sma = new SMA_1.SMA(this.interval);
    }
    update(candle) {
        const typicalPrice = this.cacheTypicalPrice(candle);
        this.sma.update(typicalPrice);
        if (this.sma.isStable) {
            const mean = this.sma.getResult();
            const meanDeviation = MAD_1.MAD.getResultFromBatch(this.typicalPrices, mean);
            const numerator = typicalPrice.minus(mean);
            const denominator = new __1.Big(0.015).mul(meanDeviation);
            return this.setResult(numerator.div(denominator));
        }
    }
    cacheTypicalPrice({ high, low, close }) {
        const typicalPrice = new __1.Big(high).plus(low).plus(close).div(3);
        this.typicalPrices.push(typicalPrice);
        if (this.typicalPrices.length > this.interval) {
            this.typicalPrices.shift();
        }
        return typicalPrice;
    }
}
exports.CCI = CCI;
class FasterCCI extends Indicator_1.NumberIndicatorSeries {
    constructor(interval) {
        super();
        this.interval = interval;
        this.prices = [];
        this.typicalPrices = [];
        this.sma = new SMA_1.FasterSMA(this.interval);
    }
    update(candle) {
        const typicalPrice = this.cacheTypicalPrice(candle);
        this.sma.update(typicalPrice);
        if (this.sma.isStable) {
            const mean = this.sma.getResult();
            const meanDeviation = MAD_1.FasterMAD.getResultFromBatch(this.typicalPrices, mean);
            const numerator = typicalPrice - mean;
            const denominator = 0.015 * meanDeviation;
            return this.setResult(numerator / denominator);
        }
    }
    cacheTypicalPrice({ high, low, close }) {
        const typicalPrice = (high + low + close) / 3;
        this.typicalPrices.push(typicalPrice);
        if (this.typicalPrices.length > this.interval) {
            this.typicalPrices.shift();
        }
        return typicalPrice;
    }
}
exports.FasterCCI = FasterCCI;
//# sourceMappingURL=CCI.js.map