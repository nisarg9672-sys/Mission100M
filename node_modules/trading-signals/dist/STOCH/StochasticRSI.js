"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FasterStochasticRSI = exports.StochasticRSI = void 0;
const Indicator_1 = require("../Indicator");
const RSI_1 = require("../RSI/RSI");
const __1 = require("..");
const Period_1 = require("../util/Period");
const WSMA_1 = require("../WSMA/WSMA");
class StochasticRSI extends Indicator_1.BigIndicatorSeries {
    constructor(interval, SmoothingIndicator = WSMA_1.WSMA) {
        super();
        this.interval = interval;
        this.period = new Period_1.Period(interval);
        this.rsi = new RSI_1.RSI(interval, SmoothingIndicator);
    }
    update(price) {
        const rsiResult = this.rsi.update(price);
        if (rsiResult) {
            const periodResult = this.period.update(rsiResult);
            if (periodResult) {
                const min = periodResult.lowest;
                const max = periodResult.highest;
                const denominator = max.minus(min);
                if (denominator.eq(0)) {
                    return this.setResult(new __1.Big(100));
                }
                const numerator = rsiResult.minus(min);
                return this.setResult(numerator.div(denominator));
            }
        }
    }
}
exports.StochasticRSI = StochasticRSI;
class FasterStochasticRSI extends Indicator_1.NumberIndicatorSeries {
    constructor(interval, SmoothingIndicator = WSMA_1.FasterWSMA) {
        super();
        this.interval = interval;
        this.period = new Period_1.FasterPeriod(interval);
        this.rsi = new RSI_1.FasterRSI(interval, SmoothingIndicator);
    }
    update(price) {
        const rsiResult = this.rsi.update(price);
        if (rsiResult !== undefined) {
            const periodResult = this.period.update(rsiResult);
            if (periodResult) {
                const min = periodResult.lowest;
                const max = periodResult.highest;
                const denominator = max - min;
                if (denominator === 0) {
                    return this.setResult(100);
                }
                const numerator = rsiResult - min;
                return this.setResult(numerator / denominator);
            }
        }
    }
}
exports.FasterStochasticRSI = FasterStochasticRSI;
//# sourceMappingURL=StochasticRSI.js.map