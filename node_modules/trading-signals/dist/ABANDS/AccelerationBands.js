"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FasterAccelerationBands = exports.AccelerationBands = void 0;
const __1 = require("..");
const SMA_1 = require("../SMA/SMA");
const error_1 = require("../error");
class AccelerationBands {
    constructor(interval, width, SmoothingIndicator = SMA_1.SMA) {
        this.interval = interval;
        this.width = width;
        this.lowerBand = new SmoothingIndicator(interval);
        this.middleBand = new SmoothingIndicator(interval);
        this.upperBand = new SmoothingIndicator(interval);
    }
    get isStable() {
        return this.middleBand.isStable;
    }
    update({ high, low, close }) {
        const highPlusLow = new __1.Big(high).plus(low);
        const coefficient = highPlusLow.eq(0) ? new __1.Big(0) : new __1.Big(high).minus(low).div(highPlusLow).mul(this.width);
        this.lowerBand.update(new __1.Big(low).mul(new __1.Big(1).minus(coefficient)));
        this.middleBand.update(close);
        this.upperBand.update(new __1.Big(high).mul(new __1.Big(1).plus(coefficient)));
    }
    getResult() {
        if (!this.isStable) {
            throw new error_1.NotEnoughDataError();
        }
        return {
            lower: this.lowerBand.getResult(),
            middle: this.middleBand.getResult(),
            upper: this.upperBand.getResult(),
        };
    }
}
exports.AccelerationBands = AccelerationBands;
class FasterAccelerationBands {
    constructor(interval, width, SmoothingIndicator = SMA_1.FasterSMA) {
        this.interval = interval;
        this.width = width;
        this.lowerBand = new SmoothingIndicator(interval);
        this.middleBand = new SmoothingIndicator(interval);
        this.upperBand = new SmoothingIndicator(interval);
    }
    update({ high, low, close }) {
        const highPlusLow = high + low;
        const coefficient = highPlusLow === 0 ? 0 : ((high - low) / highPlusLow) * this.width;
        this.lowerBand.update(low * (1 - coefficient));
        this.middleBand.update(close);
        this.upperBand.update(high * (1 + coefficient));
    }
    get isStable() {
        return this.middleBand.isStable;
    }
    getResult() {
        if (!this.isStable) {
            throw new error_1.NotEnoughDataError();
        }
        return {
            lower: this.lowerBand.getResult(),
            middle: this.middleBand.getResult(),
            upper: this.upperBand.getResult(),
        };
    }
}
exports.FasterAccelerationBands = FasterAccelerationBands;
//# sourceMappingURL=AccelerationBands.js.map