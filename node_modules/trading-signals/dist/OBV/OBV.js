"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FasterOBV = exports.OBV = void 0;
const __1 = require("..");
const Indicator_1 = require("../Indicator");
class OBV extends Indicator_1.BigIndicatorSeries {
    constructor() {
        super(...arguments);
        this.candles = [];
    }
    update(candle) {
        var _a;
        this.candles.push(candle);
        if (this.candles.length === 1) {
            return;
        }
        const prevCandle = this.candles[this.candles.length - 2];
        const prevPrice = prevCandle.close;
        const prevResult = (_a = this.result) !== null && _a !== void 0 ? _a : new __1.Big(0);
        const currentPrice = new __1.Big(candle.close);
        const nextResult = currentPrice.gt(prevPrice) ? candle.volume : currentPrice.lt(prevPrice) ? -candle.volume : 0;
        return this.setResult(prevResult.add(nextResult));
    }
}
exports.OBV = OBV;
class FasterOBV extends Indicator_1.NumberIndicatorSeries {
    constructor() {
        super(...arguments);
        this.candles = [];
    }
    update(candle) {
        var _a;
        this.candles.push(candle);
        if (this.candles.length === 1) {
            return;
        }
        const prevCandle = this.candles[this.candles.length - 2];
        const prevPrice = prevCandle.close;
        const prevResult = (_a = this.result) !== null && _a !== void 0 ? _a : 0;
        const currentPrice = candle.close;
        const nextResult = currentPrice > prevPrice ? candle.volume : currentPrice < prevPrice ? -candle.volume : 0;
        return this.setResult(prevResult + nextResult);
    }
}
exports.FasterOBV = FasterOBV;
//# sourceMappingURL=OBV.js.map